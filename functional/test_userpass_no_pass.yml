---
- hosts: localhost
  gather_facts: no
  vars:
    username: 'bob'
    userpass: 'Th3m@n!!'
    bobs_rules: >
      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
      path "auth/token/create*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }
      path "auth/token/lookup*" {
        capabilities = ["read", "list"]
      }
      path "auth/token/lookup/*" {
        capabilities = ["read", "list"]
      }
      path "sys/policy" {
        capabilities = ["read"]
      }
      path "sys/policy/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }

  tasks:
    - name: Enable kv2 secret store
      hashivault_userpass:
        name: "{{username}}"
        state: absent
      no_log: True

    - name: "Create bob's policy"
      hashivault_policy_set:
        name: "policy-{{username}}"
        rules: "{{bobs_rules}}"
      register: 'vault_policy_set'
    - assert:
        that:
          - "{{vault_policy_set.changed}} == True"
          - "{{vault_policy_set.rc}} == 0"

    - name: Create userpass for bob
      hashivault_userpass:
        name: "{{username}}"
        pass: "{{userpass}}"
        policies: ["policy-bob"]
      register: hashivault_userpass
      no_log: True
    - assert: { that: "{{hashivault_userpass.changed}} == True" }
    - assert: { that: "{{hashivault_userpass.rc}} == 0" }

    - name: Create token
      hashivault_token_create:
        authtype: "userpass"
        display_name: "token-bob"
        username: bob
        policies: ["policy-bob"]
        password: "{{userpass}}"
      register: 'hashivault_userpass_update_no_pass_token'
    - assert: { that: "{{hashivault_userpass_update_no_pass_token.changed}} == True" }
    - assert: { that: "{{hashivault_userpass_update_no_pass_token.rc}} == 0" }

    - name: Set cidr without pass
      hashivault_userpass:
        name: "{{username}}"
        password: ""
        policies: ["policy-bob", "default"]
      register: 'hashivault_userpass_update_no_pass'
    - assert: { that: "{{hashivault_userpass_update_no_pass.changed}} == True" }
    - assert: { that: "{{hashivault_userpass_update_no_pass.rc}} == 0" }

    - name: Create token with updated user
      hashivault_token_create:
        authtype: "userpass"
        display_name: "token-bob"
        username: bob
        policies: ["policy-bob"]
        password: "{{userpass}}"
      register: 'hashivault_userpass_update_no_pass_token'
    - assert: { that: "{{hashivault_userpass_update_no_pass_token.changed}} == True" }
    - assert: { that: "{{hashivault_userpass_update_no_pass_token.rc}} == 0" }