---
- hosts: localhost
  gather_facts: no
  vars:
    namespace: 'application'
    rules: >
        path "secret/{{namespace}}/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
        path "secret/{{namespace}}" {
          capabilities = ["list"]
        }
    vault_addr: "{{ lookup('env','VAULT_ADDR') }}"
    vault_token: "{{ lookup('env','VAULT_TOKEN') }}"
  tasks:
    - name: Set approle policy
      hashivault_policy_set:
        name: "approle_test_policy"
        rules: "{{rules}}"
      register: 'vault_policy_set'
    - assert: { that: "{{vault_policy_set.changed}} == True" }
    - assert: { that: "{{vault_policy_set.rc}} == 0" }

    - name: enable approle authentication
      hashivault_auth_enable:
        name: approle

    - name: create role-id
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/testrole"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body: '{"policies":"approle_test_policy"}'
        status_code: 204

    - name: get role-id
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/testrole/role-id"
        headers:
          X-Vault-Token: "{{ vault_token }}"
        return_content: true
      register: role_id_raw


    - name: create secret-id
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/testrole/secret-id"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        return_content: true
      register: secret_id_raw

    - name: extract role-id
      set_fact:
        role_id: "{{ (role_id_raw.content | from_json)['data']['role_id'] }}"

    - name: extract secret-id
      set_fact:
        secret_id: "{{ (secret_id_raw.content | from_json)['data']['secret_id'] }}"

    - template:
        src: "./templates/approlenv.sh.j2"
        dest: "./approlenv.sh"
        mode: 0700
