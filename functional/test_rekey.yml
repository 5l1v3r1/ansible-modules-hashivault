---
- hosts: localhost
  vars:
    unseal_key:  "{{ lookup('env','VAULT_KEYS') }}"
  tasks:
    # check rekey status
    - hashivault_rekey_status:
      register: 'vault_rekey_status'
    - assert: { that: "{{vault_rekey_status.changed}} == False" }
    - assert: { that: "{{vault_rekey_status.rc}} == 0" }

    - block:
        - hashivault_rekey_cancel:
          register: 'vault_rekey_cancel'
        - assert: { that: "{{vault_rekey_cancel.changed}} == True" }
        - assert: { that: "{{vault_rekey_cancel.rc}} == 0" }
      when: "vault_rekey_status.status.started == True"

    # start rekey 
    - hashivault_rekey_init:
        secret_shares: 1
        secret_threshold: 1
      register: 'vault_rekey_init'
    - assert: { that: "{{vault_rekey_init.changed}} == True" }
    - assert: { that: "{{vault_rekey_init.status.progress}} == 0" }
    - assert: { that: "{{vault_rekey_init.status.started}} == True" }
    - assert: { that: "{{vault_rekey_init.rc}} == 0" }

    # check rekey status
    - hashivault_rekey_status:
      register: 'vault_rekey_status'
    - assert: { that: "{{vault_rekey_status.changed}} == False" }
    - assert: { that: "{{vault_rekey_status.rc}} == 0" }
    - assert: { that: "{{vault_rekey_init.status.progress}} == 0" }
    - assert: { that: "{{vault_rekey_status.status.started}} == True" }

    # cancel rekey 
    - block:
        - hashivault_rekey_cancel:
          register: 'vault_rekey_cancel'
        - assert: { that: "{{vault_rekey_cancel.changed}} == True" }
        - assert: { that: "{{vault_rekey_cancel.rc}} == 0" }
      when: "vault_rekey_status.status.started == True"

    # (re)start rekey 
    - hashivault_rekey_init:
        secret_shares: 1
        secret_threshold: 1
      register: 'vault_rekey_init'
    - assert: { that: "{{vault_rekey_init.changed}} == True" }
    - assert: { that: "{{vault_rekey_init.status.progress}} == 0" }
    - assert: { that: "{{vault_rekey_init.status.started}} == True" }
    - assert: { that: "{{vault_rekey_init.rc}} == 0" }

    # update rekey
    - hashivault_rekey:
        key: "{{ unseal_key }}"
        nonce: "{{ vault_rekey_init.status.nonce }}"
      register: 'vault_rekey'
    - assert: { that: "{{vault_rekey.changed}} == True" }
    - assert: { that: "{{vault_rekey.rc}} == 0" }

    # update vaultenv.sh with (new) unseal keys after rekey
    - lineinfile:
        name: vaultenv.sh
        regexp: '^export VAULT_KEYS='
        line: export VAULT_KEYS='{{ vault_rekey['status']['keys'][0] }}'
